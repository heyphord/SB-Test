version: 0.2

env:
  variables:
    CONTAINER_NAME: "demo-microservice"
    TAG: "latest"
    AWS_CLUSTER_NAME: "demo-cluster"
    REPOSITORY_URL: "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com"


phases:
  install:
    runtime-versions:
      java: corretto11
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - echo $REPOSITORY_URL
      - echo $AWS_ACCOUNT_ID
      - echo $AWS_DEFAULT_REGION
      - aws --version
      # Log in to Amazon ECR using AWS CLI
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
  build:
    commands:
      - echo Building Docker image...
      # Build Docker image using the Dockerfile in your project
      - docker build -t $CONTAINER_NAME .
      # Push the Docker image to Amazon ECR
      - docker tag $CONTAINER_NAME:latest $REPOSITORY_URL/$CONTAINER_NAME:$TAG
      - docker push $REPOSITORY_URL/$CONTAINER_NAME:$TAG

  post_build:
    commands:
      - echo Deploying to AWS EKS...
      - aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name $AWS_CLUSTER_NAME
      - aws sts get-caller-identity

      # Apply Kubernetes manifests (deployment, service, etc.) using kubectl
      - kubectl apply -f $CODEBUILD_SRC_DIR/kubernetes/deployment.yml -n your-namespace
      # Add more commands as needed for other Kubernetes manifests (e.g., ConfigMap, Ingress)
      - kubectl get pods
      - kubectl get svc
      - kubectl get nodes
